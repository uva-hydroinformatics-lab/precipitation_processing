#x = apply(x, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
y = prostate[, 9]
folds = createFolds(y)
errs = array()
#for(i in 1:10){
i = 1
train.x = x[-folds[[i]], ]
test.x = x[folds[[i]], ]
train.y = y[-folds[[i]]]
test.y = y[folds[[i]]]
tr.x = train.x
tr.y = train.y
tst.x = test.x
a = as.data.frame(tr.x)
b = as.data.frame(tr.y)
colnames(b) = "tr.y"
c = cbind(b, a)
tst.x.df = as.data.frame(tst.x)
vnam <- colnames(a)
fmla <- as.formula(paste("tr.y ~ ", paste(vnam, collapse= "+")))
z = boosting(fmla, data = c, mfinal = 10)
z = boosting(fmla, c, mfinal = 10)
Q
fmla
c
head(c)
head(test.x)
library(ElemStatLearn)
require(caret)
require(MASS)
require(rpart)
require(nnet)
require(adabag)
require(randomForest)
require(e1071)
require(BMA)
set.seed(1)
data(prostate)
x = prostate[, 1:8]
#x = apply(x, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
y = prostate[, 9]
folds = createFolds(y)
errs = array()
#for(i in 1:10){
i = 1
train.x = x[-folds[[i]], ]
test.x = x[folds[[i]], ]
train.y = y[-folds[[i]]]
test.y = y[folds[[i]]]
tr.x = train.x
tr.y = train.y
tst.x = test.x
a = as.data.frame(tr.x)
b = as.data.frame(tr.y)
colnames(b) = "tr.y"
c = cbind(b, a)
tst.x.df = as.data.frame(tst.x)
vnam <- colnames(a)
fmla <- as.formula(paste("tr.y ~ ", paste(vnam, collapse= "+")))
boosting(fmla, c)
fmla
?boosting\
?boosting
boosting(fmla, c)
object
object$frame
object$splits
c
boosting(fmla, c)
debugSource('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a.R')
debugSource('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a.R')
debugSource('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2_test.R')
library(ElemStatLearn)
require(caret)
require(MASS)
require(rpart)
require(nnet)
require(adabag)
require(randomForest)
require(e1071)
require(BMA)
set.seed(1)
data(prostate)
x = prostate[, 1:8]
#x = apply(x, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
y = prostate[, 9]
folds = createFolds(y)
errs = array()
#for(i in 1:10){
i = 1
train.x = x[-folds[[i]], ]
test.x = x[folds[[i]], ]
train.y = y[-folds[[i]]]
test.y = y[folds[[i]]]
tr.x = train.x
tr.y = train.y
tst.x = test.x
a = as.data.frame(tr.x)
b = as.data.frame(tr.y)
colnames(b) = "tr.y"
c = cbind(b, a)
tst.x.df = as.data.frame(tst.x)
vnam <- colnames(a)
fmla <- as.formula(paste("tr.y ~ ", paste(vnam, collapse= "+")))
boosting(fmla, c)
boosting(fmla, c, control = (minsplit = 0))
boosting(fmla, c, control = rpart.control(minsplit = 0))
boosting(fmla, c, control = rpart.control(cp = -1))
boosting(fmla, c, control = rpart.control(cp = -1), boos = TRUE)
boosting(fmla, c, control = rpart.control(minsplit = 1))
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2.R')
?lm.ridge
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2.R')
install.packages("mboost")
require(mboost)
fit = blackboost(fmla, data = c)
pred = predict(fit, tst.x.df)
error = sum((test.y - pred)^2)/length(test.y)
errs[i] = error
#}
print(mean(errs))
?blackboost
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2.R')
?nnet
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2_test.R')
plot(fit)
fit
summary(fit)
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2_test.R')
pred
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part2.R')
?prcomp
?lm.ridge
?rpart
?randomForest
?svm
?nnet
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
error
pred
head(pred)
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
head(test.y)
length(test.y)
head(pred)
fit
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
pred$class
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
error
sum(pred != test.y)
length(test.y)
debugSource('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a.R')
debugSource('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a.R')
accuracy.df
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
error
pred
debugSource('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a.R')
debugSource('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a.R')
accuracy.df
debugSource('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
library(ElemStatLearn)
require(caret)
require(MASS)
require(rpart)
require(nnet)
require(adabag)
require(randomForest)
require(e1071)
# data(zip.train)
# x = zip.train[, 2:257]
# y = zip.train[, 1]
x = iris[, 1:4]
y = iris[, 5]
folds = createFolds(y)
i = 1
train.x = x[-folds[[i]], ]
test.x = x[folds[[i]], ]
train.y = y[-folds[[i]]]
test.y = y[folds[[i]]]
tr.x = train.x
tr.y = train.y
tst.x = test.x
a = as.data.frame(tr.x)
b = as.data.frame(factor(tr.y))
colnames(b) = "tr.y"
c = cbind(b, a)
tst.x.df = as.data.frame(tst.x)
vnam <- colnames(a)
fmla <- as.formula(paste("tr.y ~ ", paste(vnam, collapse= "+")))
num_units_in_hidden_layers = 2 # called M in our notes and text
range_for_initial_random_weights = 0.1 # see next three lines of comments
weight_decay = 5e-4 # weight decaay to avoid overfitting
maximum_iterations = 200 # maximum number of iterations in training
num_units_in_hidden_layers = 2 # called M in our notes and text
range_for_initial_random_weights = 0.1 # see next three lines of comments
# Value about 0.5 unless the inputs are
# large, in which case it should be chosen so that
# rang* max(  |x|) is about 1
weight_decay = 5e-4 # weight decaay to avoid overfitting
maximum_iterations = 200 # maximum number of iterations in training
# train a neural net on this training subset
z <- nnet(fmla, data = c,
size = num_units_in_hidden_layers,
rang = range_for_initial_random_weights,
decay = weight_decay,
maxit = maximum_iterations)
pred = predict(z, tst.x.df)
pred
test.y
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/Materials/R Scripts/Neural+Net+on+Iris+Data.R')
test.cl(targets[-samp,], predict(ir1, ir[-samp,]))
predict(ir1, ir[-samp,])
pred
max.col(pred)
test.y
colnames(pred)
colnames(pred)[1]
colnames(pred)[max.col(pred)]
colnames(pred)[max.col(pred)] == test.y
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
error
debugSource('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a.R')
debugSource('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a.R')
accuracy.df
debugSource('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a.R')
accuracy.df
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
?nnet
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
max(x)
min(x)
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
library(ElemStatLearn)
require(caret)
require(MASS)
require(rpart)
require(nnet)
require(adabag)
require(randomForest)
require(e1071)
# data(zip.train)
# x = zip.train[, 2:257]
# y = zip.train[, 1]
x = iris[, 1:4]
y = iris[, 5]
max(x)
1/7.9
debugSource('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a.R')
accuracy.df
debugSource('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a.R')
debugSource('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a.R')
accuracy.df
library(ElemStatLearn)
require(caret)
require(MASS)
require(rpart)
require(nnet)
require(adabag)
require(randomForest)
require(e1071)
# data(zip.train)
# x = zip.train[, 2:257]
# y = zip.train[, 1]
x = iris[, 1:4]
y = iris[, 5]
folds = createFolds(y)
i = 1
train.x = x[-folds[[i]], ]
test.x = x[folds[[i]], ]
train.y = y[-folds[[i]]]
test.y = y[folds[[i]]]
tr.x = train.x
tr.y = train.y
tst.x = test.x
a = as.data.frame(tr.x)
b = as.data.frame(factor(tr.y))
colnames(b) = "tr.y"
c = cbind(b, a)
tst.x.df = as.data.frame(tst.x)
vnam <- colnames(a)
fmla <- as.formula(paste("tr.y ~ ", paste(vnam, collapse= "+")))
num_units_in_hidden_layers = 3 # called M in our notes and text
range_for_initial_random_weights = 0.5 # see next three lines of comments
weight_decay = 5e-4 # weight decaay to avoid overfitting
maximum_iterations = 400 # maximum number of iterations in training
# train a neural net on this training subset
z <- multinom(fmla, c, MaxNWts = 3000)
p = predict(z, tst.x.df, type="probs")
p
pred = array()
for (i in 1:nrow(tst.x)){
pred[i] = which.max(t(p[i,]))-1
}
pred
for (i in 1:nrow(tst.x)){
pred[i] = which.max(t(p[i,]))
}
pred
for (i in 1:nrow(tst.x)){
pred[i] = colnames(tst.x[which.max(t(p[i,]))])
}
pred
p
for (i in 1:nrow(tst.x)){
pred[i] = colnames(p[which.max(t(p[i,]))])
}
colnames(p)
debugSource('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
for (i in 1:nrow(tst.x)){
pred[i] = colnames(p)[which.max(t(p[i,]))]
}
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a_test.R')
test.y
pred
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a.R')
accuracy.df
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a.R')
source('C:/Users/jeff_dsktp/Box Sync/Data Mining/HW/Final Project/part1a.R')
accuracy.df
?lda
?qda
?multinom
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
write.csv(model.attr, file = paste(data_dir, infilename, "_model_params.csv", sep=""))
model.attr
data.model@properties
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
debugSource('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
model.print
model.print(data.model)
data.model
data.model$basics
debugSource('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
model.attr
data.model$basics
length(data.model$basics)
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
model.attr
showClass("model")
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
model.attr
debugSource('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
debugSource('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
print(data.model)
data.model$basic
data.model$basics
data.model$properties
data.model@properties
data.model@basics
debugSource('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
model.attr
data.model$parmeter
data.model$ncova
data.model$nvar
data.model$ndim
debugSource('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
count
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
model.eval(data.model)
model.attr
rain.csv
write.csv(model.attr, file = paste(data_dir, infilename, "_model_params.csv", sep=""))
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
library(RGeostats)
library(XLConnect)
#read in csvfile and change into rgeostats db object
infilename = "fifteen_min"
fileext = ".xlsx"
data_dir = "C:\\Users\\jeff_dsktp\\Box Sync\\Sadler_1stPaper\\rainfall\\data\\"
rain.wb = loadWorkbook(paste(data_dir, infilename, fileext, sep=""))
rain.csv <- readWorksheet(rain.wb, sheet = 1, header=TRUE)
non_zero_columns = which(colSums(rain.csv[-1:-4], na.rm=T) !=0) + 4
rain.csv = rain.csv[, c(1:4, non_zero_columns)]
rain.filt = rain.csv[,c(2,3,non_zero_columns)]
rain.db <- db.create(rain.filt,ndim=2,autoname=F,flag.grid=F)
rain.csv
non_zero_columns
dim(rain.csv)
rain.csv <- readWorksheet(rain.wb, sheet = 1, header=TRUE)
dim(rain.csv)
rain.csv = rain.csv[, c(1:4, non_zero_columns)]
head(rain.csv)
rain.filt = rain.csv[,c(2,3,non_zero_columns)]
rain.csv <- readWorksheet(rain.wb, sheet = 1, header=TRUE)
non_zero_columns = which(colSums(rain.csv[-1:-4], na.rm=T) !=0) + 4
rain.filt = rain.csv[,c(2,3,non_zero_columns)]
head(rain.filt)
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
debugSource('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
debugSource('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
debugSource('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
rain.filt
col_name = colnames(rain.filt)[i]
date = strsplit(col_name, "X")[[1]][2]
date = substring(date, 1, 10)
col_name = colnames(rain.filt)[i+2]
date = strsplit(col_name, "X")[[1]][2]
date = substring(date, 1, 10)
rain.db <- db.locate(rain.db, i, "z")
rain.db
rain.db <- db.locate(rain.db, col_name, "z")
rain.db
data.vario <- vario.calc(rain.db,lag=lag,nlag=nlag)
data.model <- model.auto(data.vario, struct = c("Spherical"), title="Modelling omni-directional variogram", draw = F)
# model characteristics
sill = as.numeric(data.model$basics[[1]]$sill)
range = as.numeric(data.model$basics[[1]]$range)
modeltype = as.character(data.model$basics[[1]]$vartype)
m = data.frame('date' = date, 'sill' = sill, 'range' = range, 'type' = modeltype)
model.attr = rbind(model.attr, m)
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
head(model.attr)
debugSource('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
col_name
date
s = strplit(date, ".")
s = strsplit(date, ".")
s[[1]]
date
s[[1]][1]
debugSource('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
strsplit(col_name, "X")[[1]][2]
date = strsplit(col_name, "X")[[1]][2]
date
strsplit(date)
strsplit(date, ".")
strsplit(date, "2")
strsplit()
debugSource('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
model.attr
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
source('C:/Users/jeff_dsktp/Box Sync/Sadler_1stPaper/rainfall/precipitation_processing/R/rainfall_variograms.R')
source('~/Research/Sadler_1st_Paper/Manuscript/precipitation_processing/R/rainfall_variograms.R')
setwd("~/Research/Sadler_1st_Paper/Manuscript/precipitation_processing/R")
source('~/Research/Sadler_1st_Paper/Manuscript/precipitation_processing/R/rainfall_variograms.R')
non_zero_columns
dim(rain.csv)
source('~/Research/Sadler_1st_Paper/Manuscript/precipitation_processing/R/rainfall_variograms.R')
model.attr
dbWriteTable(con, paste(data_dir, table, "_model_params.csv", sep=""), model.attr)
dbWriteTable(con, paste(data_dir, table, "_model_params", sep=""), model.attr)
ma = model.attr
dbWriteTable(con, paste(data_dir, table, "_model_params", sep=""), ma)
paste(data_dir, table, "_model_params", sep="")
paste(table, "_model_params", sep="")
dbWriteTable(con, paste(table, "_model_params", sep=""), model.attr)
dbDisconnect(con)
source('~/Research/Sadler_1st_Paper/Manuscript/precipitation_processing/R/rainfall_variograms.R')
con
dbReadTable(con, 'hr')
dbReadTable(con, paste(table, "_model_params", sep=""))
dbDisconnect(con)
source('~/Research/Sadler_1st_Paper/Manuscript/precipitation_processing/R/rainfall_variograms.R')
source('~/Research/Sadler_1st_Paper/Manuscript/precipitation_processing/R/rainfall_variograms.R')
model.attr
rain.csv
date = colnames(rain.filt)[3]
source('~/Research/Sadler_1st_Paper/Manuscript/precipitation_processing/R/rainfall_variograms.R')
source('~/Research/Sadler_1st_Paper/Manuscript/precipitation_processing/R/rainfall_variograms.R')
model.attr
source('~/Research/Sadler_1st_Paper/Manuscript/precipitation_processing/R/rainfall_variograms.R')
source('~/Research/Sadler_1st_Paper/Manuscript/precipitation_processing/R/rainfall_variograms.R')
